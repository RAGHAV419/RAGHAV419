 public long maximumSubarraySum(int[] nums, int k) {
        long ans =0;
        long currsum =0;
        int n = nums.length;

        Map<Integer,Integer> map = new HashMap<>();

        for(int i=0;i<k;i++){
            map.put(nums[i],map.getOrDefault(nums[i],0)+1);
            currsum += (long)nums[i];
        }
    
    
        if(map.size()==k){
        ans = currsum;
    }
    
    
    
    
    for(int i=k;i<n;i++){
        currsum -=(long)nums[i-k];
        currsum +=(long)nums[i];
        
        map.put(nums[i-k],map.get(nums[i-k])-1);
        if(map.get(nums[i-k])==0){
            map.remove(nums[i-k]);
        }
        map.put(nums[i],map.getOrDefault(nums[i],0)+1);
        
        if(map.size()==k){
            ans = Math.max(currsum,ans);
        }
       
    }
         return ans;
        
    }
}
